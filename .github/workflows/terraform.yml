name: 'Terraform CI/CD Pipeline'

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      aws_region:
        description: 'AWS region'
        required: true
        default: 'ap-northeast-2'
      environment:
        description: 'Deployment environment'
        required: true
        default: 'dev'
      project_name:
        description: 'Project name'
        required: true
        default: 'test'
      action:
        description: 'Action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy

env:
  TF_VERSION: '1.5.0'
  AWS_REGION: 'ap-northeast-2'
  TF_VAR_environment: 'dev'
  TF_VAR_project_name: 'test'

jobs:
  terraform-plan:
    name: 'Terraform Plan'
    if: |
      github.event_name != 'workflow_dispatch' ||
      github.event.inputs.action == 'plan' ||
      github.event.inputs.action == 'apply'
    runs-on: ubuntu-latest
    environment: 'dev'
    outputs:
      plan-output: ${{ steps.plan.outputs.stdout }}
      
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
        terraform_wrapper: false

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: 'ap-northeast-2'

    - name: Terraform Format Check
      id: fmt
      run: terraform fmt -check -recursive
      continue-on-error: true

    - name: Terraform Init
      id: init
      run: terraform init

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color

    - name: Terraform Plan
      id: plan
      run: |
        terraform plan -no-color -input=false -out=tfplan
        terraform show -no-color tfplan
      continue-on-error: false

    - name: Save Plan
      uses: actions/upload-artifact@v4
      with:
        name: terraform-plan
        path: tfplan

    - name: Comment PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          
          const output = `#### Terraform Format and Style üñå \`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è \`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ \`${{ steps.validate.outcome }}\`
          #### Terraform Plan üìñ \`${{ steps.plan.outcome }}\`
          
          <details><summary>Show Plan</summary>
          
          \`\`\`terraform
          ${{ steps.plan.outputs.stdout }}
          \`\`\`
          
          </details>
          
          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })
          

  terraform-apply:
    name: 'Terraform Apply'
    runs-on: ubuntu-latest
    needs: terraform-plan
    if: |
      github.ref == 'refs/heads/main' && (
        github.event_name == 'push' ||
        (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply')
      )
    environment: 
      name: 'dev'
      url: ${{ steps.apply.outputs.application_url }}
      
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
        terraform_wrapper: false

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Download Plan
      uses: actions/download-artifact@v4
      with:
        name: terraform-plan

    - name: Terraform Init
      run: terraform init

    - name: Terraform Apply
      id: apply
      run: |
        terraform apply -auto-approve tfplan
        echo "application_url=$(terraform output -raw application_url 2>/dev/null || echo 'N/A')" >> $GITHUB_OUTPUT

    - name: Update Backstage Component
      if: success()
      run: |
        echo "Deployment successful for test"
        echo "Environment: dev"
        echo "Application URL: ${{ steps.apply.outputs.application_url }}"

  terraform-destroy:
    name: 'Terraform Destroy'
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy'
    environment: 'dev-destroy'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Terraform Init
      run: terraform init

    - name: Terraform Destroy
      run: terraform destroy -auto-approve
